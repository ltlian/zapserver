// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscribe.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	subscribe.proto

It has these top-level messages:
	SubscribeMessage
	NotificationMessage
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeMessage_Statistics int32

const (
	// If no 'Statistics' argument is provided, default is 0
	// This can be expanded to allow for several options
	SubscribeMessage_SUMMARY      SubscribeMessage_Statistics = 0
	SubscribeMessage_VIEWERCOUNT  SubscribeMessage_Statistics = 1
	SubscribeMessage_AVGDURATIONS SubscribeMessage_Statistics = 2
	SubscribeMessage_SAMPLESIZE   SubscribeMessage_Statistics = 3
)

var SubscribeMessage_Statistics_name = map[int32]string{
	0: "SUMMARY",
	1: "VIEWERCOUNT",
	2: "AVGDURATIONS",
	3: "SAMPLESIZE",
}
var SubscribeMessage_Statistics_value = map[string]int32{
	"SUMMARY":      0,
	"VIEWERCOUNT":  1,
	"AVGDURATIONS": 2,
	"SAMPLESIZE":   3,
}

func (x SubscribeMessage_Statistics) String() string {
	return proto1.EnumName(SubscribeMessage_Statistics_name, int32(x))
}
func (SubscribeMessage_Statistics) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type SubscribeMessage struct {
	RefreshRate uint32                      `protobuf:"varint,1,opt,name=RefreshRate" json:"RefreshRate,omitempty"`
	Statistics  SubscribeMessage_Statistics `protobuf:"varint,2,opt,name=statistics,enum=proto.SubscribeMessage_Statistics" json:"statistics,omitempty"`
}

func (m *SubscribeMessage) Reset()                    { *m = SubscribeMessage{} }
func (m *SubscribeMessage) String() string            { return proto1.CompactTextString(m) }
func (*SubscribeMessage) ProtoMessage()               {}
func (*SubscribeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubscribeMessage) GetRefreshRate() uint32 {
	if m != nil {
		return m.RefreshRate
	}
	return 0
}

func (m *SubscribeMessage) GetStatistics() SubscribeMessage_Statistics {
	if m != nil {
		return m.Statistics
	}
	return SubscribeMessage_SUMMARY
}

type NotificationMessage struct {
	Status string                       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Top10  []*NotificationMessage_Top10 `protobuf:"bytes,2,rep,name=top10" json:"top10,omitempty"`
}

func (m *NotificationMessage) Reset()                    { *m = NotificationMessage{} }
func (m *NotificationMessage) String() string            { return proto1.CompactTextString(m) }
func (*NotificationMessage) ProtoMessage()               {}
func (*NotificationMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NotificationMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NotificationMessage) GetTop10() []*NotificationMessage_Top10 {
	if m != nil {
		return m.Top10
	}
	return nil
}

type NotificationMessage_Top10 struct {
	ChannelName string `protobuf:"bytes,1,opt,name=channelName" json:"channelName,omitempty"`
	Viewcount   uint32 `protobuf:"varint,2,opt,name=viewcount" json:"viewcount,omitempty"`
	// Could also return duration as a scalar (seconds, nanoseconds)
	AvgDuration string `protobuf:"bytes,3,opt,name=avgDuration" json:"avgDuration,omitempty"`
	// Could return the whole log of zaps if the client wanted to calculate eg. variance and st. deviation, but
	// would be very expensive.
	SampleSize uint32 `protobuf:"varint,4,opt,name=sampleSize" json:"sampleSize,omitempty"`
}

func (m *NotificationMessage_Top10) Reset()                    { *m = NotificationMessage_Top10{} }
func (m *NotificationMessage_Top10) String() string            { return proto1.CompactTextString(m) }
func (*NotificationMessage_Top10) ProtoMessage()               {}
func (*NotificationMessage_Top10) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *NotificationMessage_Top10) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *NotificationMessage_Top10) GetViewcount() uint32 {
	if m != nil {
		return m.Viewcount
	}
	return 0
}

func (m *NotificationMessage_Top10) GetAvgDuration() string {
	if m != nil {
		return m.AvgDuration
	}
	return ""
}

func (m *NotificationMessage_Top10) GetSampleSize() uint32 {
	if m != nil {
		return m.SampleSize
	}
	return 0
}

func init() {
	proto1.RegisterType((*SubscribeMessage)(nil), "proto.SubscribeMessage")
	proto1.RegisterType((*NotificationMessage)(nil), "proto.NotificationMessage")
	proto1.RegisterType((*NotificationMessage_Top10)(nil), "proto.NotificationMessage.Top10")
	proto1.RegisterEnum("proto.SubscribeMessage_Statistics", SubscribeMessage_Statistics_name, SubscribeMessage_Statistics_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Subscription service

type SubscriptionClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Subscription_SubscribeClient, error)
}

type subscriptionClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionClient(cc *grpc.ClientConn) SubscriptionClient {
	return &subscriptionClient{cc}
}

func (c *subscriptionClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Subscription_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Subscription_serviceDesc.Streams[0], c.cc, "/proto.Subscription/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionSubscribeClient{stream}
	return x, nil
}

type Subscription_SubscribeClient interface {
	Send(*SubscribeMessage) error
	Recv() (*NotificationMessage, error)
	grpc.ClientStream
}

type subscriptionSubscribeClient struct {
	grpc.ClientStream
}

func (x *subscriptionSubscribeClient) Send(m *SubscribeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subscriptionSubscribeClient) Recv() (*NotificationMessage, error) {
	m := new(NotificationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Subscription service

type SubscriptionServer interface {
	Subscribe(Subscription_SubscribeServer) error
}

func RegisterSubscriptionServer(s *grpc.Server, srv SubscriptionServer) {
	s.RegisterService(&_Subscription_serviceDesc, srv)
}

func _Subscription_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubscriptionServer).Subscribe(&subscriptionSubscribeServer{stream})
}

type Subscription_SubscribeServer interface {
	Send(*NotificationMessage) error
	Recv() (*SubscribeMessage, error)
	grpc.ServerStream
}

type subscriptionSubscribeServer struct {
	grpc.ServerStream
}

func (x *subscriptionSubscribeServer) Send(m *NotificationMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subscriptionSubscribeServer) Recv() (*SubscribeMessage, error) {
	m := new(SubscribeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Subscription_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Subscription",
	HandlerType: (*SubscriptionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Subscription_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "subscribe.proto",
}

func init() { proto1.RegisterFile("subscribe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xdf, 0x6a, 0xe2, 0x40,
	0x14, 0xc6, 0x1d, 0x5d, 0x5d, 0x3c, 0xf1, 0x4f, 0x98, 0x85, 0xdd, 0x20, 0xcb, 0x12, 0x72, 0x95,
	0xab, 0xe0, 0xba, 0xb0, 0xf7, 0xd9, 0x35, 0x2d, 0x82, 0x89, 0x65, 0xa2, 0x96, 0xf6, 0x6e, 0x0c,
	0xa3, 0x0e, 0x68, 0x12, 0x32, 0x13, 0x0b, 0x7d, 0x83, 0xbe, 0x58, 0xdf, 0xa7, 0x6f, 0x50, 0x32,
	0x46, 0x0d, 0xa5, 0x5e, 0x0d, 0xf3, 0x3b, 0xdf, 0xf9, 0xce, 0x9c, 0x6f, 0xa0, 0x2f, 0xf2, 0x95,
	0x88, 0x32, 0xbe, 0x62, 0x4e, 0x9a, 0x25, 0x32, 0xc1, 0x4d, 0x75, 0x58, 0xaf, 0x08, 0xf4, 0xf0,
	0x54, 0xf2, 0x99, 0x10, 0x74, 0xc3, 0xb0, 0x09, 0x1a, 0x61, 0xeb, 0x8c, 0x89, 0x2d, 0xa1, 0x92,
	0x19, 0xc8, 0x44, 0x76, 0x97, 0x54, 0x11, 0xfe, 0x07, 0x20, 0x24, 0x95, 0x5c, 0x48, 0x1e, 0x09,
	0xa3, 0x6e, 0x22, 0xbb, 0x37, 0xb2, 0x8e, 0xce, 0xce, 0x47, 0x3b, 0x27, 0x3c, 0x2b, 0x49, 0xa5,
	0xcb, 0x9a, 0x02, 0x5c, 0x2a, 0x58, 0x83, 0xaf, 0xe1, 0xc2, 0xf7, 0x5d, 0xf2, 0xa0, 0xd7, 0x70,
	0x1f, 0xb4, 0xe5, 0xc4, 0xbb, 0xf7, 0xc8, 0xff, 0xd9, 0x22, 0x98, 0xeb, 0x08, 0xeb, 0xd0, 0x71,
	0x97, 0xb7, 0xe3, 0x05, 0x71, 0xe7, 0x93, 0x59, 0x10, 0xea, 0x75, 0xdc, 0x03, 0x08, 0x5d, 0xff,
	0x6e, 0xea, 0x85, 0x93, 0x47, 0x4f, 0x6f, 0x58, 0x6f, 0x08, 0xbe, 0x05, 0x89, 0xe4, 0x6b, 0x1e,
	0x51, 0xc9, 0x93, 0xf8, 0xb4, 0xcb, 0x77, 0x68, 0x15, 0x33, 0x73, 0xa1, 0xd6, 0x68, 0x93, 0xf2,
	0x86, 0xff, 0x42, 0x53, 0x26, 0xe9, 0xef, 0xa1, 0x51, 0x37, 0x1b, 0xb6, 0x36, 0x32, 0xcb, 0xc7,
	0x7f, 0x62, 0xe1, 0xcc, 0x0b, 0x1d, 0x39, 0xca, 0x07, 0x2f, 0x08, 0x9a, 0x0a, 0x14, 0x29, 0x45,
	0x5b, 0x1a, 0xc7, 0x6c, 0x17, 0xd0, 0x3d, 0x2b, 0xed, 0xab, 0x08, 0xff, 0x84, 0xf6, 0x81, 0xb3,
	0xa7, 0x28, 0xc9, 0x63, 0xa9, 0x42, 0xea, 0x92, 0x0b, 0x28, 0xfa, 0xe9, 0x61, 0x33, 0xce, 0x33,
	0x35, 0xcc, 0x68, 0x1c, 0xfb, 0x2b, 0x08, 0xff, 0x02, 0x10, 0x74, 0x9f, 0xee, 0x58, 0xc8, 0x9f,
	0x99, 0xf1, 0x45, 0x19, 0x54, 0xc8, 0x68, 0x09, 0x9d, 0x32, 0xec, 0x54, 0xe9, 0x6f, 0xa0, 0x7d,
	0x0e, 0x1f, 0xff, 0xb8, 0xf2, 0x1d, 0x83, 0xc1, 0xf5, 0x55, 0xad, 0x9a, 0x8d, 0x86, 0x68, 0xd5,
	0x52, 0x82, 0x3f, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x0e, 0x46, 0x36, 0x35, 0x02, 0x00,
	0x00,
}
